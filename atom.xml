<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Zkun]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com//"/>
  <updated>2016-07-27T11:07:04.000Z</updated>
  <id>http://yoursite.com//</id>
  
  <author>
    <name><![CDATA[Zkun]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[给app添加3Dtouch之QuickAction]]></title>
    <link href="http://yoursite.com/2016/07/26/post6-3DtouchQuickAction/"/>
    <id>http://yoursite.com/2016/07/26/post6-3DtouchQuickAction/</id>
    <published>2016-07-26T03:43:16.000Z</published>
    <updated>2016-07-27T11:07:04.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xwste.com1.z0.glb.clouddn.com/post6_3DtouchQuickAction/1.png" alt="head_image"><br>特别简单!<br><a id="more"></a></p>
<h1 id="给app添加3DTouch，quickAction">给app添加3DTouch，quickAction</h1><p>quickAction即重按app的启动按钮，弹出的快捷启动方式<br>通常分为两种, Static QuickAction和 Dynamic QuickAction，一般都只会用到Static QuickAction。<br>区别：</p>
<ul>
<li>Static是写在info.list中，Dynamic是过代码动态生成的。</li>
<li>因为Dynamic是代码动态生成的，所以app运行前是没有Dynamic QuickAction的。</li>
<li>Static的优先级是高于Dynamic的，而且QuickAction数量限制是4个，所以你如果添加了三个Static QuickAction，那就只能添加一个Dynamic QuickAction。</li>
</ul>
<h2 id="如何添加静态的quickAction">如何添加静态的quickAction</h2><p>打开info.list编辑成如下。<br><img src="http://7xwste.com1.z0.glb.clouddn.com/post6_3DtouchQuickAction/2.png" alt=""></p>
<p>源码为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItems<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">array</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">dict</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItemIconFile<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">string</span>&gt;</span>search-icon<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItemType<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">string</span>&gt;</span>Search<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItemTitle<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">string</span>&gt;</span>查找<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItemSubtitle<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">string</span>&gt;</span><span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItemUserInfo<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">dict</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">dict</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">dict</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItemIconType<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">string</span>&gt;</span>UIApplicationShortcutIconTypeAdd<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItemSubtitle<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">string</span>&gt;</span><span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItemTitle<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">string</span>&gt;</span>添加<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItemType<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">string</span>&gt;</span>New<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItemUserInfo<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">dict</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">key</span>&gt;</span>password<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">string</span>&gt;</span>123456<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">key</span>&gt;</span>username<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">string</span>&gt;</span>username<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="title">dict</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">array</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>安装测试，即可看到如图的效果，<strong><em>注意我这里用了一张search-icon的图片，你本地要是没有就会导致查找的icon为空</em></strong>。</p>
<p><img src="http://7xwste.com1.z0.glb.clouddn.com/post6_3DtouchQuickAction/3.png" alt=""></p>
<p>下面对这些选项做一下介绍</p>
<ol>
<li>UIApplicationShortcutItemIconType:<br>非必需选项，使用系统自带的icon，比如如：UIApplicationShortcutIconTypeSearch，UIApplicationShortcutIconTypeAdd</li>
<li>UIApplicationShortcutItemIconFile:<br>非必需选项，使用自定义的icon，值为Images.xcassets中的图片文件名</li>
<li>UIApplicationShortcutItemTitle:<br>必填，这个不用多说，即为标题</li>
<li>UIApplicationShortcutItemSubtitle:<br>非必需选项，副标题</li>
<li>UIApplicationShortcutItemType:<br>必填，用于区分不同的action，进入app后，根据它做不同的操作</li>
<li>UIApplicationShortcutItemUserInfo:<br>非必需选项，用来加入传入的参数，</li>
</ol>
<p>处理QuickAction</p>
<p>在AppDelegate中有一代理方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, performActionForShortcutItem shortcutItem: UIApplicationShortcutItem, completionHandler: <span class="params">(Bool)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="comment">//这里即为处理action的地点</span></span><br><span class="line">    <span class="comment">//完成后调用completionHandler方法，我这里自定义一个handleAction方法，返回值为是否处理成功。</span></span><br><span class="line">    completionHandler(hanleAction(shortcutItem))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>通过定义一个enum非常简单的实现handleAction方法</p>
<figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ShortCut</span>: String</span>&#123;</span><br><span class="line">  case New, Search</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private func handleAction(shortcutItem: <span class="type">UIApplicationShortcutItem</span>) -&gt; <span class="type">Bool</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="literal">result</span> = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">type</span> = shortcutItem.<span class="keyword">type</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> shortCut = <span class="type">ShortCut</span>.init(rawValue: <span class="keyword">type</span>)&#123;</span><br><span class="line">      switch shortCut&#123;</span><br><span class="line">      <span class="keyword">case</span> .<span class="type">New</span>:</span><br><span class="line">        print(<span class="string">"call new"</span>)</span><br><span class="line">        <span class="literal">result</span> = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">case</span> .<span class="type">Search</span>:</span><br><span class="line">        print(<span class="string">"call search"</span>)</span><br><span class="line">        <span class="literal">result</span> = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>除了这种处理方式，还可以这样通过application(didFinishLaunchingWithOptions:)做处理<br>但是这种方式只会在第一次启动时执行，而且当两种方式同时存在的时候就会和上面的处理方式重复，因为这一种处理方式会在上一种之前执行，所以当你在这里处理完quickAction后return false，这样就不会重复第一种执行方式了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> shortcutItem = launchOptions?[<span class="type">UIApplicationLaunchOptionsShortcutItemKey</span>] <span class="keyword">as</span>? <span class="type">UIApplicationShortcutItem</span> &#123;</span><br><span class="line">      handleAction(shortcutItem)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="添加动态的quickAction">添加动态的quickAction</h2><p>添加Dynamic quickAction特别简单，代码几行就可以完成了</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func application(<span class="string">application:</span> UIApplication, didFinishLaunchingWithOptions <span class="string">launchOptions:</span> [<span class="string">NSObject:</span> AnyObject]?) -&gt; Bool &#123;</span><br><span class="line">    let shortCutItem1 = UIApplicationShortcutItem(type: <span class="string">"test3"</span>, <span class="string">localizedTitle:</span> <span class="string">"dynamic 1"</span>, <span class="string">localizedSubtitle:</span> <span class="string">""</span>, <span class="string">icon:</span> UIApplicationShortcutIcon(<span class="string">templateImageName:</span> <span class="string">"qr"</span>), <span class="string">userInfo:</span> nil)</span><br><span class="line">    let shortCutItem2 = UIApplicationShortcutItem(<span class="string">type:</span> <span class="string">"test4"</span>, <span class="string">localizedTitle:</span> <span class="string">"dynamic 2"</span>, <span class="string">localizedSubtitle:</span> <span class="string">""</span>, <span class="string">icon:</span> UIApplicationShortcutIcon(<span class="string">templateImageName:</span> <span class="string">"qr"</span>), <span class="string">userInfo:</span> nil)</span><br><span class="line">    application.shortcutItems = [shortCutItem1, shortCutItem2]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>参数和static一样，效果图如下:</p>
<p><img src="http://7xwste.com1.z0.glb.clouddn.com/post6_3DtouchQuickAction/4.png" alt=""></p>
<p>看添加3Dtouch的quickAction还是挺简单的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xwste.com1.z0.glb.clouddn.com/post6_3DtouchQuickAction/1.png" alt="head_image"><br>特别简单!<br>]]>
    
    </summary>
    
      <category term="ios, swift" scheme="http://yoursite.com/tags/ios-swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[webmock解决测试外部链接问题]]></title>
    <link href="http://yoursite.com/2015/08/26/post5webmock/"/>
    <id>http://yoursite.com/2015/08/26/post5webmock/</id>
    <published>2015-08-26T10:15:11.000Z</published>
    <updated>2015-08-26T10:25:31.000Z</updated>
    <content type="html"><![CDATA[<p>前段时间测试api的时候，遇到个问题，有的api内部是需要访问外部的api。但是测试环境下得数据都是假的，所以访问外部的api，得到的返回结果都是不对的，所以我需要一个假的外部api的返回值。<br><a id="more"></a></p>
<p>网上google了一下，找到了一个gem， webmock，很强大的，可以自己定制的http返回</p>
<p>例子：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stub_request(<span class="symbol">:get</span>, ‘www.geekpark.net’).<span class="keyword">return</span> (<span class="symbol">body:</span> ‘abcdefg’, <span class="symbol">status:</span> <span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<p>就可以直接阻止去www.gekpark.net的get请求，并返回’abcdefg’</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">Net::HTTP</span>.get(‘www.geekpark.net’, ‘/‘)   <span class="comment"># “abcdefg\n”</span></span><br></pre></td></tr></table></figure>
<p>我使用的是rspec测试，所以我的解决办法就<br>在spec_helper.rb中</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config.before(<span class="symbol">:each</span>) <span class="keyword">do</span></span><br><span class="line">  stub_request(<span class="symbol">:any</span>, <span class="string">'http://www.geekpark.net/api/user'</span>).to_return <span class="keyword">do</span> |request|</span><br><span class="line">     hi = <span class="string">"what you want"</span></span><br><span class="line">    &#123; <span class="symbol">body:</span> hi, <span class="symbol">status:</span> <span class="number">200</span> &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这样在我的每个测试之前就能运行 stub_request ，在这里的to_return的代码块中的request就是被拦截下的http请求。你可以获取request中不同的值来返回不同的结果。</p>
<p>更详细的用法，请看<a href="https://github.com/bblimke/webmock" target="_blank" rel="external">https://github.com/bblimke/webmock</a></p>
<p>还有一个要注意，在gemfile中这个gem放在了哪个环境的group中后就会将当前环境外部请求阻止掉，所以在test中使用就只放到test 的group下就好了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前段时间测试api的时候，遇到个问题，有的api内部是需要访问外部的api。但是测试环境下得数据都是假的，所以访问外部的api，得到的返回结果都是不对的，所以我需要一个假的外部api的返回值。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rails数据预加载 includes eager_load preload]]></title>
    <link href="http://yoursite.com/2015/08/17/post4_rails%E6%95%B0%E6%8D%AE%E9%A2%84%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2015/08/17/post4_rails数据预加载/</id>
    <published>2015-08-17T13:49:55.000Z</published>
    <updated>2015-08-24T02:06:00.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/post4.jpg" alt="head_image"><br>前些天因为想减少站点的sql查询，过程中遇到些问题，搜解决办法时看到一篇文章，受益匪浅，想把自己的看完的理解总结然后分享一下，如果有不对的地方，求指导。<br><a id="more"></a></p>
<p><a href="http://blog.arkency.com/2013/12/rails4-preloading" target="_blank" rel="external">原文章地址请点在这里</a></p>
<h2 id="三种预加载方式">三种预加载方式</h2><p>我们在rails中有三种方式可以用来预加载数据，分别是 eager_load preload includes. 但是实际上预加载的方式就只有两种，preload和eager_load, 而includes是做什么的呢？它是内部自行判断，然后调用preload或是eager_load。</p>
<h2 id="假如">假如</h2><p>有个 User(用户) model 还有一个Post(帖子) model，它们是一对多的关系</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user has_many posts</span><br></pre></td></tr></table></figure>
<p>首先先看看使用preload和eager_load这两中加载方法有什么区别</p>
<h2 id="preload">preload</h2><p>使用preload将查出用户的时候预加载出用户发的帖子</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">User</span>.preload(<span class="symbol">:posts</span>)</span><br><span class="line"><span class="comment">#select “users”.* from “users"</span></span><br><span class="line"><span class="comment">#select “posts”.* from “posts” where “posts”. “user_id” IN (1, 2, 3)</span></span><br></pre></td></tr></table></figure>
<p>它生成两句sql语句，第二句预加载了posts表的内容。但是这种方式有个弊端，当你在预加载的时候想给预加载的表加上条件的时候就有问题了,比如我想加载用户的同时加载这个用户点赞高于100的例子</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">User</span>.preload(<span class="symbol">:posts</span>).where(<span class="string">"posts.like_count &gt; ?"</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment">#报错</span></span><br></pre></td></tr></table></figure>
<p>因为preload这种加载方式是使用两句查询语句，并没有join posts表, 所以不能这样给post加上条件</p>
<p>想要给预加载的表加上条件，那就试试使用eager_load的方式来预加载</p>
<h2 id="eager_load">eager_load</h2><p>因为sql太长所以分了几行</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">User</span>.eager_load(<span class="symbol">:posts</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#select "users"."id" AS t0_r0, "users"."name" AS t0_r1, "users"."email" AS t0_r2,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#"posts"."id" AS t1_r0, "posts"."title" AS t1_r1,"posts"."like_count" AS t1_r2, "posts"."users_id" AS t1_r3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#from "users" left outer join "posts" on "posts"."users_id" = "users"."id"</span></span><br></pre></td></tr></table></figure>
<p>可以看到最后一行eager_load预加载数据是将users和posts做了左连接，所以eager_load是可以给post加上条件查询语句的，即：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">User</span>.eager_load(<span class="symbol">:posts</span>).where(<span class="string">"posts.like_count &gt; ?"</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p>生成的sql语句为，前面两行相等，最后一行多了个查询条件：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from <span class="string">"users"</span> left outer join <span class="string">"posts"</span> on <span class="string">"posts"</span>.<span class="string">"users_id"</span> = <span class="string">"users"</span>.<span class="string">"id"</span> where (posts.like_count &gt; <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p>看，条件查询就可以正常使用了。其实preload也是可以实现条件加载，下面会说到。</p>
<h2 id="includes">includes</h2><p>最后说一下inludes, 在Rails3中includes它是可以自行判断这种一对多的预加载条件查询的，即当你使用</p>
<p>User.includes(‘posts’)<br>它会调用<br>User.preload(‘posts’)<br>当使用<br>User.includes(‘posts’).where(“posts.like_count &gt; ?”, 100)<br>它会自行调用<br>User.eager_load(‘posts’).where(“posts.like_count &gt; ?”, 100)</p>
<p>但是在Rails4中使用，就会报错,报错信息里面有着详细解释,截取一段</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">User</span>.includes(<span class="string">'posts'</span>).where(<span class="string">"posts.like_count &gt; ?"</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#DEPRECATION WARNING: It looks like you are eager loading table(s)</span></span><br><span class="line"><span class="comment"># (one of: users, addresses) that are referenced in a string SQL</span></span><br><span class="line"><span class="comment"># snippet. For example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    Post.includes(:comments).where("comments.title = 'foo'")</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Currently, Active Record recognizes the table in the string, and knows</span></span><br><span class="line"><span class="comment"># to JOIN the comments table to the query, rather than loading comments</span></span><br><span class="line"><span class="comment"># in a separate query. However, doing this without writing a full-blown</span></span><br><span class="line"><span class="comment"># SQL parser is inherently flawed. Since we don't want to write an SQL</span></span><br><span class="line"><span class="comment"># parser, we are removing this functionality. From now on, you must explicitly</span></span><br><span class="line"><span class="comment"># tell Active Record when you are referencing a table from a string</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Post.includes(:comments).where("comments.title = 'foo'").references(:comments)</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>原来这种自行判断的方法在Rails4时被去掉了，在预加载对象时使用判断语句，它还是会使用preload。</p>
<p>有两个办法解决:</p>
<p>一个是直接调用eager_load</p>
<p>另一个是像上面报错信息里面举得例子一样使用references</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">User</span>.includes(<span class="string">'posts'</span>).where(<span class="string">"posts.like_count &gt; ?"</span>, <span class="number">100</span>).references(<span class="symbol">:posts</span>)</span><br><span class="line"><span class="comment">#或是</span></span><br><span class="line"><span class="constant">User</span>.preload(<span class="string">'posts'</span>).where(<span class="string">"posts.like_count &gt; ?"</span>, <span class="number">100</span>).references(<span class="symbol">:posts</span>)</span><br></pre></td></tr></table></figure>
<p>两个方法生成的sql语句都是一样的，都是左连接查询</p>
<h2 id="结合使用association来实现预加载">结合使用association来实现预加载</h2><p>其实preload或是eager_load还可以通过association实现预加载</p>
<p>例如：<br>在user的model中加入</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">has_many <span class="symbol">:popular_posts</span>, <span class="symbol">condition:</span> &#123;like_count &gt; <span class="number">100</span>&#125;, <span class="symbol">class_name:</span> <span class="string">'Post'</span></span><br></pre></td></tr></table></figure>
<p>使用preload来预加载会生成两条sql语句来查询</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">User</span>.preload(<span class="symbol">:popular_posts</span>)</span><br><span class="line"><span class="comment">#生成的sql语句</span></span><br><span class="line"><span class="comment">#select "users".* from "users"</span></span><br><span class="line"><span class="comment">#select "posts".* from "posts" where "posts"."like_count" &gt; 100 AND "posts"."user_id" in (1, 2, 3)</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>使用eager_load效果</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">User</span>.eager_load(<span class="symbol">:popular_posts</span>)</span><br><span class="line"><span class="comment">#生成sql语句和下面一样，都是左链接</span></span><br><span class="line"><span class="constant">User</span>.eager_load(<span class="symbol">:posts</span>).where(<span class="string">"posts.like_count &gt; ?"</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/post4.jpg" alt="head_image"><br>前些天因为想减少站点的sql查询，过程中遇到些问题，搜解决办法时看到一篇文章，受益匪浅，想把自己的看完的理解总结然后分享一下，如果有不对的地方，求指导。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用factory_girl_seeds添加测试种子数据]]></title>
    <link href="http://yoursite.com/2015/07/26/post3/"/>
    <id>http://yoursite.com/2015/07/26/post3/</id>
    <published>2015-07-26T03:37:55.000Z</published>
    <updated>2016-07-27T11:07:51.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/post3.jpg" alt="head_image"><br>之前写过一篇创建测试的种子数据，但是那种方法有一些缺陷，所以现在改成使用factory_girl_seed来创建种子数据。<br><a id="more"></a></p>
<h3 id="原因">原因</h3><p>之前写过一篇创建测试种子文件的blog，虽然创建成功了，但是使用起来还是有些麻烦，因为数据创建，但是创建的数据没有创建数据引用.<br>比如说创建了一个user 使用的时候还是要用User.find_by_email(..)等代码查询出来。我需要直接使用它。不想多写代码，怎们办那就要用到factory_girl_seeds。</p>
<h3 id="factory_girl_seeds使用">factory_girl_seeds使用</h3><p><a href="https://github.com/evrone/factory_girl-seeds" target="_blank" rel="external">factory_girl_seed的github首页</a></p>
<p>加入到gem</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">group <span class="symbol">:test</span> <span class="keyword">do</span></span><br><span class="line">  gem <span class="string">'factory_girl-seeds'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>创建数据的方式就为，当然数据在factories文件夹中已经写好模版</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">FactoryGirl::SeedGenerator</span>.create(<span class="symbol">:user</span>)</span><br></pre></td></tr></table></figure>
<h3 id="创建初始数据">创建初始数据</h3><p>新建一个文件，写上生成数据的代码，require到spec_helper.rb或者说是直接在spec_helper.rb最下面中创建一个方法</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> </span>create_test_date</span><br><span class="line">	<span class="constant">FactoryGirl::SeedGenerator</span>.create(<span class="symbol">:meta_user</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在然后加上以下内容，before(:suite)是让他在整个测试开始前运行，搭配上DatabaseCleaner删除数据strategy使用的是struncation（<a href="http://stackoverflow.com/questions/10904996/difference-between-truncation-transaction-and-deletion-database-strategies" target="_blank" rel="external">各项strategy的区别</a>）</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">RSpec</span>.configure <span class="keyword">do</span> |config|</span><br><span class="line">  config.before(<span class="symbol">:suite</span>) <span class="keyword">do</span></span><br><span class="line">    <span class="constant">DatabaseCleaner</span>.clean_with(<span class="symbol">:truncation</span>)</span><br><span class="line">    create_test_data</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>完成后直接通过一下语句调用</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">FactoryGirl</span>.seed(<span class="symbol">:meta_user</span>)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/post3.jpg" alt="head_image"><br>之前写过一篇创建测试的种子数据，但是那种方法有一些缺陷，所以现在改成使用factory_girl_seed来创建种子数据。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[在ubuntu14.04下安装pptp vpn服务]]></title>
    <link href="http://yoursite.com/2015/07/18/post2/"/>
    <id>http://yoursite.com/2015/07/18/post2/</id>
    <published>2015-07-18T15:41:09.000Z</published>
    <updated>2015-07-29T00:57:23.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/post2.jpg" alt="head_image"><br>最近自己想搭一个vpn服务给手机用，网上一搜教程一大堆，但是也有一些坑，还好找到一个靠谱的搭建教程，以下就是我的搭建过程。<br><a id="more"></a></p>
<h3 id="需要">需要</h3><p>  一台能访问外网的服务器，还有。。。没有了。</p>
<p>  什么你没有服务器，好吧，买一个吧，推荐一个国外的<a href="https://bandwagonhost.com/cart.php?a=confproduct&amp;i=0" target="_blank" rel="external">vps</a>,因为只需要搭建一个vpn所以买个低配的就行了.</p>
<h3 id="开始">开始</h3><h5 id="第一步">第一步</h5><p>ssh上去，首先安装pptp<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install pptpd</span><br></pre></td></tr></table></figure></p>
<h5 id="第二步">第二步</h5><p>安装完后编辑pptp.conf配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/pptpd.conf</span><br></pre></td></tr></table></figure></p>
<p>在当前文件下写入以下配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">option</span> /etc/ppp/pptpd-options                    <span class="comment">#指定PPP选项文件的位置</span></span><br><span class="line"><span class="built_in">debug</span>                                           <span class="comment">#启用调试模式</span></span><br><span class="line">localip <span class="number">192.168.0.1</span>                             <span class="comment">#VPN服务器的虚拟ip</span></span><br><span class="line">remoteip <span class="number">192.168.0.200</span>-<span class="number">238</span>,<span class="number">192.168.0.245</span>        <span class="comment">#分配给VPN客户端的虚拟ip</span></span><br></pre></td></tr></table></figure></p>
<h5 id="第三步">第三步</h5><p>编辑PPP选项配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ppp/pptpd-options</span><br></pre></td></tr></table></figure></p>
<p>写入以下配置<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">name pptpd                      <span class="comment">#pptpd服务的名称</span></span><br><span class="line">refuse-pap                      <span class="comment">#拒绝pap身份认证模式</span></span><br><span class="line">refuse-chap                     <span class="comment">#拒绝chap身份认证模式</span></span><br><span class="line">refuse-mschap                   <span class="comment">#拒绝mschap身份认证模式</span></span><br><span class="line"><span class="keyword">require</span>-mschap-v2               <span class="comment">#允许mschap-v2身份认证模式</span></span><br><span class="line"><span class="keyword">require</span>-mppe-<span class="number">128</span>                <span class="comment">#允许mppe 128位加密身份认证模式</span></span><br><span class="line">ms-dns <span class="number">8.8</span>.<span class="number">8.8</span>                  <span class="comment">#使用Google DNS</span></span><br><span class="line">ms-dns <span class="number">8.8</span>.<span class="number">4.4</span>                  <span class="comment">#使用Google DNS</span></span><br><span class="line">proxyarp                        <span class="comment">#arp代理</span></span><br><span class="line">debug                           <span class="comment">#调试模式</span></span><br><span class="line"><span class="keyword">dump</span>                            <span class="comment">#服务启动时打印出所有配置信息</span></span><br><span class="line">lock                            <span class="comment">#锁定TTY设备</span></span><br><span class="line">nobsdcomp                       <span class="comment">#禁用BSD压缩模式</span></span><br><span class="line">logfile /var/<span class="keyword">log</span>/pptpd.<span class="keyword">log</span>      <span class="comment">#输出日志文件位置</span></span><br></pre></td></tr></table></figure></p>
<h5 id="第四步">第四步</h5><p>建立你的vpn的账户,编辑用户配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure></p>
<p>添加的格式如下</p>
<p>#用户名  &nbsp;&nbsp;&nbsp; 服务类型  &nbsp;&nbsp;&nbsp; 密码 &nbsp;&nbsp;&nbsp;&nbsp;  分配的ip地址</p>
<p>test&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1234&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</p>
<p>重启pptpd<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service pptpd restart</span><br></pre></td></tr></table></figure></p>
<h5 id="第五步">第五步</h5><p>配置网络和路由规则 设置ipv4转发<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">'s/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g'</span> /etc/sysctl.conf</span><br><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure></p>
<p>sudo sysctl -p 使用这条命令的时候可能会报错<br>error: permission denied on key ‘net.nf_conntrack_max’</p>
<p>解决办法,运行完下面的命令后再执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm <span class="operator">-f</span> /sbin/modprobe</span><br><span class="line">ln <span class="operator">-s</span> /bin/<span class="literal">true</span> /sbin/modprobe</span><br><span class="line">rm <span class="operator">-f</span> /sbin/sysctl</span><br><span class="line">ln <span class="operator">-s</span> /bin/<span class="literal">true</span> /sbin/sysctl</span><br></pre></td></tr></table></figure></p>
<h5 id="第六步">第六步</h5><p>设置iptables, 首先是使用ifconfig来查询你的外网网卡是哪个，我这里是venen0,查看到你的网卡后将你的网卡名替换到下面的命令中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables --table nat --append POSTROUTING --out-interface ppp0 -j MASQUERADE</span><br><span class="line">sudo iptables -t nat -A POSTROUTING <span class="operator">-s</span> <span class="number">192.168</span>.<span class="number">0.0</span>/<span class="number">24</span> -o venen0 -j MASQUERADE</span><br></pre></td></tr></table></figure>
<p>因为iptable的配置在服务器重启后都会重置，所以我们可以将当前的命令加入到/etc/rc.local中这样每次启动都会执行</p>
<h3 id="结束">结束</h3><p>搭建完成现在可以放心使用，如果发现可以连接上vpn但是访问不了外网，那就可能是第六步iptables的配置有问题，建议换个网卡名试试。</p>
<p>头图来自<a href="http://www.haiwaitoutiao.com/?p=328156" target="_blank" rel="external">海外头条</a> 侵删</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/post2.jpg" alt="head_image"><br>最近自己想搭一个vpn服务给手机用，网上一搜教程一大堆，但是也有一些坑，还好找到一个靠谱的搭建教程，以下就是我的搭建过程。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[rails rspec测试使用seed文件添加基本测试数据]]></title>
    <link href="http://yoursite.com/2015/07/16/first/"/>
    <id>http://yoursite.com/2015/07/16/first/</id>
    <published>2015-07-16T12:41:09.000Z</published>
    <updated>2015-07-18T16:40:46.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/post1.jpg" alt="head_image"><br>因为当初不写测试<br><a id="more"></a></p>
<p>参与了一个项目的制作，当时为了项目的速度，导致里面的脏代码太多，而且当时也没有写上测试，所以项目现在不能看。好吧是我写测试没有坚持下去。</p>
<p>现在开始重构代码了，补上测试，脏代码也要完全改过。好苦逼啊！不过自己挖的坑终究是要自己来填的。</p>
<h3 id="使用">使用</h3><p>项目model层的关系有些复杂，有的model是依赖一些model才能创建，往往创建一个对象会链锁反应需要创建一堆的对象，而且测试需要的对象所要的依赖大多都不相同。所以找了个办法使用了seeds文件在每次执行测试之前添加测试数据。</p>
<p>首先创建seed文件，当然你可以随便取名字只要.rb结尾</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rails_app_path/db/<span class="built_in">test</span>_seeds.rb</span><br></pre></td></tr></table></figure>
<p>然后打开你的spec_helper.rb文件加入以下内容<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">RSpec</span>.configure <span class="keyword">do</span> |config|</span><br><span class="line">  config.before(<span class="symbol">:suite</span>) <span class="keyword">do</span></span><br><span class="line">    load <span class="string">"<span class="subst">#&#123;<span class="constant">Rails</span>.root&#125;</span>/db/test_seeds.rb"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<p>然后你每次的运行测试之前都会将这个seeds文件先执行一遍。这时候你就可以使用DatabaseCleaner每次执行测试前将数据库内容清空</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/post1.jpg" alt="head_image"><br>因为当初不写测试<br>]]>
    
    </summary>
    
  </entry>
  
</feed>